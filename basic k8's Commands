# Create and run a container/pod
kubectl run nginx --image=nginx

# list running container/pod
kubectl get pods

# view log
kubectl logs <pod>

# get detailed info
kubectl describe pod <pod-name>

# Execute interactive shell
kubectl exec -it <pod-name> -- bash

# Remove pod
kubectl delete pod <pod-name>

Pods always run on Nodes ( Worker Machine) 
Node - Managed by Kubernetes Control Plane
Node can have multiple pods

Ways to create objects:-
1. Kubectl run
2. Manifest file - contains information of resources to be created 
YAML/JSON file - that defines the desired state of K8 objects

Benefits of Manifest :
It can be stored in version control systems like git
Allowing you to track changes to your infra over time and easily rollback to previous versions

K8's Resource type :- 
1. Pod
2. Deployment
3. Services
4. Configmap
5. Secrets
6. Persistent Volume
7 Persistent volumeclaim
8. Ingress 
9. Namespace

* Each container in pod must have a unique name 

# Generating Manifest file using CLI 
# --dry-run=client (allows you to validate a K8 resource definition without actually applying it to Cluster)
kubectl run nginx --image=nginx --dry-run=client -o yaml 

kubectl run nginx --image=nginx ( allows to run a single container pods)

For running Multiple containers pods need to use Manifest file 

# For single container pod - 1/1
For multi container pod - 2/2

kubectl exec -it multi-container-pod -- bash
# by default it will connect to the first container 

if you want to connect to other containers of pod - can add  -c with flag <Container name>
kubectl exec -it multi-container-pod -c redis-container -- bash

# when a docker image is built - it can have certain ENTRYPOINT and CMD instructions - that define what container needs to run when it starts 
(When you create a pod - you can define COMMAND and ARGUMENT for container that runs in that pod)
COMMAND ----> ENTRYPOINT
ARGUMENT ----> CMD

#In this exercise, you create a Pod that runs one container. The configuration file for the Pod defines a command and  arguments:

original - 

apiVersion: v1
kind: Pod
metadata:
  name: new-ping-pod
spec:
  containers:
  - name: ping-container
    image: busybox:latest
    command: ["ping"]
    args: ["-c", "60", "google.com"]

-> COMMAND argument defined --:> overrides the default ENTRYPOINT.
-> args(argument) ---> overrides default CMD 


 kubectl run ping-pod --image=busybox:latest --command -- ping "-c" "30" "google.com"


# Defining commands and argument

1. Array []
2. Multi-line YAML list

Features : 
1. Syntax - > Array - JSON style [] , Multi-line - YAML style -
2. Readability -> Array - Compact hard to read , Multi-line - more human readable
3. Preference -> Array - suitable for short command , Multi-line - preferred for long command 

apiVersion: v1
kind: Pod
metadata:
  name: new-ping-pod
spec:
  containers:
  - name: ping-container
    image: busybox:latest
    command: ["ping","-c", "60", "google.com"]
    

apiVersion: v1
kind: Pod
metadata:
  name: new-ping-pod
spec:
  containers:
  - name: ping-container
    image: busybox:latest
    command: 
      - "ping"
      - "-c"
      - "60" 
      - "google.com"

Separation of args and command in K8 is design choice that provides flexibility and clarity 

To delete all pods
kubectl delete pod --all


PS C:\KPLAB> kubectl run custom-pod --image=busybox:latest --dry-run=client -o yaml --command -- echo "Hello World"!
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: custom-pod
  name: custom-pod
spec:
  containers:
  - command:
    - echo
    - Hello World
    - '!'
    image: busybox:latest
    name: custom-pod
    resources: {}
  dnsPolicy: ClusterFirst
  restartPolicy: Always
status: {}


Command - to specify ENTRYPOINT or main executable that will run in the container
args- define the args or parameter that are passed in command

* if a container image defines a default ENTRYPOINT - K8 will use it unless you explicitly override it with command

CLI Documentation

Kubectl explain pods (will explain about pods)
 kubectl explain pod.spec.containers.lifecycle ( it will go inside the pod and then spec and then container and lifecycle and so more will explain) as you enter the .resource name.

#EXPOSE  
-It informs docker that container listen on specified port at runtime
-does not publish the port
-it functions as type of documentation  between person who builds the image  & person  who runs the container about which ports are intended to publish

is primarily used for the documenting part so that the person who is running the image knows on which port a application is running so that he can publish it accordingly.

apiVersion: v1
kind: Pod
metadata:
  name: nginx-pod
spec:
  containers:
  - name: nginx
    image: democontainer
    ports:
    - containerPort: 8080

**Expose port 8080 in the pod." (Imp in EXAMS) 
Kubernetes does not publish or expose this port externally unless you also create a Service.

#Labels - Key/value pair that are attached to objects such as pods
Labels = Tags
kubectl get pods -l env=dev

#Selectors - allows us to filter objects based on label

With Labels - 

PS C:\KPLAB> kubectl get pods
No resources found in default namespace.
PS C:\KPLAB> kubectl get pods -l env=dev
No resources found in default namespace.
PS C:\KPLAB> kubectl run pod-1 --image=nginx
pod/pod-1 created
PS C:\KPLAB> kubectl run pod-2 --image=nginx
pod/pod-2 created
PS C:\KPLAB> kubectl run pod-3 --image=nginx
pod/pod-3 created
PS C:\KPLAB> kubectl get pods
NAME    READY   STATUS              RESTARTS   AGE
pod-1   1/1     Running             0          19s
pod-2   1/1     Running             0          12s
pod-3   0/1     ContainerCreating   0          2s
PS C:\KPLAB> kubectl get pods --show-labels
NAME    READY   STATUS    RESTARTS   AGE   LABELS
pod-1   1/1     Running   0          37s   run=pod-1
pod-2   1/1     Running   0          30s   run=pod-2
pod-3   1/1     Running   0          20s   run=pod-3
PS C:\KPLAB> kubectl label pod pod-1 env=dev
pod/pod-1 labeled
PS C:\KPLAB> kubectl label pod pod-2 env=stage
pod/pod-2 labeled
PS C:\KPLAB> kubectl label pod pod-3 env=prod
pod/pod-3 labeled
PS C:\KPLAB> kubectl get pods --show-labels
NAME    READY   STATUS    RESTARTS   AGE   LABELS
pod-1   1/1     Running   0          91s   env=dev,run=pod-1
pod-2   1/1     Running   0          84s   env=stage,run=pod-2
pod-3   1/1     Running   0          74s   env=prod,run=pod-3

With Selectors
PS C:\KPLAB> kubectl get pods
NAME    READY   STATUS    RESTARTS   AGE
pod-1   1/1     Running   0          2m18s
pod-2   1/1     Running   0          2m11s
pod-3   1/1     Running   0          2m1s
PS C:\KPLAB> kubectl get pods -l env=dev
NAME    READY   STATUS    RESTARTS   AGE
pod-1   1/1     Running   0          2m35s
PS C:\KPLAB> kubectl get pods -l env=prod
NAME    READY   STATUS    RESTARTS   AGE
pod-3   1/1     Running   0          2m26s
PS C:\KPLAB> kubectl get pods -l env=stage
NAME    READY   STATUS    RESTARTS   AGE
pod-2   1/1     Running   0          2m38s

# This lists all pods that do not have the label env=stage.
PS C:\KPLAB> kubectl get pods -l env!=stage
NAME    READY   STATUS    RESTARTS   AGE
pod-1   1/1     Running   0          3m35s
pod-3   1/1     Running   0          3m18s

#This removes the env label from the pod named pod-1.
The trailing dash - means "delete the label".

PS C:\KPLAB> kubectl label pod pod-1 env-
pod/pod-1 unlabeled
PS C:\KPLAB> kubectl get pods --show-labels
NAME    READY   STATUS    RESTARTS   AGE     LABELS
pod-1   1/1     Running   0          5m10s   run=pod-1
pod-2   1/1     Running   0          5m3s    env=stage,run=pod-2
pod-3   1/1     Running   0          4m53s   env=prod,run=pod-3


PS C:\KPLAB> kubectl run nginx --image=nginx --dry-run=client -o yaml
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: nginx
  name: nginx
spec:
  containers:
  - image: nginx
    name: nginx
    resources: {}
  dnsPolicy: ClusterFirst
  restartPolicy: Always
status: {}

# edit env:dev

apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: nginx
    env: dev
  name: nginx
spec:
  containers:
  - image: nginx
    name: nginx
    resources: {}
  dnsPolicy: ClusterFirst
  restartPolicy: Always
status: {}

PS C:\KPLAB> kubectl run nginx --image=nginx --dry-run=client -o yaml > label.pod.yaml
PS C:\KPLAB> kubectl apply -f label.pod.yaml
error: error parsing label.pod.yaml: error converting YAML to JSON: yaml: line 8: could not find expected ':'
PS C:\KPLAB> kubectl apply -f label.pod.yaml
pod/nginx created
PS C:\KPLAB> kubectl get pods --show-labels
NAME    READY   STATUS    RESTARTS   AGE   LABELS
nginx   1/1     Running   0          26s   env=dev,run=nginx
pod-1   1/1     Running   0          11m   run=pod-1
pod-2   1/1     Running   0          11m   env=stage,run=pod-2
pod-3   1/1     Running   0          10m   env=prod,run=pod-3


#🔍 Why This Matters:
Even though the actual pod status (Running, Pending, etc.) is managed by Kubernetes and reflected in kubectl get pods, it’s not a label by default. By manually labeling status=running, you're now able to:

📌 Filter and Group Resources by Logical State
Even if their real status changes later, your label helps with:

Group-based queries
Creating services or deployments with label selectors
Organizing resources for environments, automation, monitoring, etc.



PS C:\KPLAB> kubectl get pods --show-labels
NAME    READY   STATUS    RESTARTS   AGE     LABELS
nginx   1/1     Running   0          3m29s   env=dev,run=nginx
pod-1   1/1     Running   0          14m     run=pod-1
pod-2   1/1     Running   0          14m     env=stage,run=pod-2
pod-3   1/1     Running   0          14m     env=prod,run=pod-3
PS C:\KPLAB> kubectl label pods --all status=running
pod/nginx labeled
pod/pod-1 labeled
pod/pod-2 labeled
pod/pod-3 labeled
PS C:\KPLAB> kubectl get pods --show-labels
NAME    READY   STATUS    RESTARTS   AGE     LABELS
nginx   1/1     Running   0          3m56s   env=dev,run=nginx,status=running
pod-1   1/1     Running   0          14m     run=pod-1,status=running
pod-2   1/1     Running   0          14m     env=stage,run=pod-2,status=running
pod-3   1/1     Running   0          14m     env=prod,run=pod-3,status=running
